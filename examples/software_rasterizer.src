# A very simple unoptimized software triangle rasterizer
# This is just an example program for the toy language


IMPORT "stdlib/sdl.src"
IMPORT "stdlib/string.src"
IMPORT "stdlib/io.src"
IMPORT "stdlib/debug.src"

IMPORT "stdlib/memory.src"

IMPORT "stdlib/math_scalar.src"
IMPORT "stdlib/math_vector.src"
IMPORT "stdlib/math_matrix.src"


RGB8 :: TYPE
  r: U8
  g: U8
  b: U8

RGBA8 :: TYPE
  r: U8
  g: U8
  b: U8
  a: U8


TriangleVertex :: TYPE
  position: Vector3
  normal: Vector3
  color: RGBA8


TriangleMesh :: TYPE
  vertices: @TriangleVertex
  indices: @U32
  vertexCount: U32
  indexCount: U32


RenderContext :: TYPE
  bufferWidth: U32
  bufferHeight: U32
  bufferColor: @U8
  bufferDepth: @U32
  viewportMatrix: Matrix4x4
  lastTime: U32
  elapsedTime: F32
  deltaTime: F32


Camera :: TYPE
  position: Vector3
  front: Vector3
  pitch: F32
  yaw: F32
  viewportWidth: F32
  viewportHeight: F32
  fieldOfView: F32


SceneObject :: TYPE
  mesh: @TriangleMesh
  position: Vector3


SceneInfo :: TYPE
  objects: [128]SceneObject
  objectCount: S64
  lightDirection: Vector3


addSceneObject :: (sceneInfo: @SceneInfo, mesh: @TriangleMesh, position: Vector3) {
  IF (sceneInfo.objectCount + 1 > 128) { RETURN }
  sceneObject: @SceneObject = @sceneInfo.objects[sceneInfo.objectCount]
  sceneObject.mesh = mesh
  sceneObject.position = position
  sceneInfo.objectCount = sceneInfo.objectCount + 1
}


make_rgba8 :: (r: U8, g: U8, b: U8, a: U8)(result: RGBA8)
  result.r = r
  result.g = g
  result.b = b
  result.a = a


make_rgb8_from_rgba8 :: (a: RGBA8)(result: RGB8)
  result.r = a.r
  result.g = a.g
  result.b = a.b

make_vector4_from_rgba8 :: (a: RGBA8)(result: Vector4)
  result.x = CAST(F32)a.r / 255.0
  result.y = CAST(F32)a.g / 255.0
  result.z = CAST(F32)a.b / 255.0
  result.w = CAST(F32)a.a / 255.0


make_triangle_vertex :: (position: Vector3, normal: Vector3, color: RGBA8)(vertex: TriangleVertex)
  vertex.position = position
  vertex.normal = normal
  vertex.color = color


renderContextInitalize :: (ctx : @RenderContext, viewport_width: U32, viewport_height: U32)
  ctx.bufferWidth = viewport_width
  ctx.bufferHeight = viewport_height
  ctx.lastTime = 0
  ctx.elapsedTime = 0.0
  ctx.deltaTime = 0.0

  required_memory: U64 = CAST(U64)((viewport_width * viewport_height) * 3)
  required_memory = required_memory + CAST(U64)(viewport_width * viewport_height * 4)
  memory: @U8 = malloc(required_memory)
  ctx.bufferColor = memory
  ctx.bufferDepth = CAST(@U32)(CAST(U64)memory + CAST(U64)((viewport_width * viewport_height) * 3))

  ctx.viewportMatrix = make_matrix4x4_zero()
  ctx.viewportMatrix.data[0] = CAST(F32)ctx.bufferWidth / 2.0
  ctx.viewportMatrix.data[5] = CAST(F32)ctx.bufferHeight / 2.0
  ctx.viewportMatrix.data[10] = 0.5
  ctx.viewportMatrix.data[12] = CAST(F32)ctx.bufferWidth / 2.0
  ctx.viewportMatrix.data[13] = CAST(F32)ctx.bufferHeight / 2.0
  ctx.viewportMatrix.data[14] = 0.5
  ctx.viewportMatrix.data[14] = 1.0


renderContextTerminate :: (ctx : @RenderContext)
  free(ctx.bufferColor) #This is where memory for the whole buffer starts


framebufferClear :: (ctx : @RenderContext)
  bufferSize: U32 = CAST(U32)(ctx.bufferWidth * ctx.bufferHeight * 3)
  memset(ctx.bufferColor, 0, CAST(U64)bufferSize)


# Temporarily ignoring alignment
allocateTriangleMesh :: (vertexCount: U32, indexCount: U32)(mesh: @TriangleMesh)
  requiredMemory: U64 = 0
  requiredMemory = requiredMemory + SIZEOF(TriangleMesh)
  requiredMemory = requiredMemory + SIZEOF(TriangleVertex) * CAST(U64)vertexCount
  requiredMemory = requiredMemory + SIZEOF(U32) * CAST(U64)indexCount

  memory: @U8 = memory_allocate(requiredMemory)
  mesh = CAST(@TriangleMesh)memory
  mesh.vertices = CAST(@TriangleVertex)(CAST(U64)memory + SIZEOF(TriangleMesh))
  mesh.indices = CAST(@U32)(CAST(U64)mesh.vertices + (SIZEOF(TriangleVertex) * CAST(U64)vertexCount))
  mesh.vertexCount = vertexCount
  mesh.indexCount = indexCount


createProceduralPlaneMesh :: ()(mesh: @TriangleMesh)
  mesh = allocateTriangleMesh(4, 6)
  mesh.vertices[0].position = make_vector3(0.0, 0.0, 0.0)
  mesh.vertices[1].position = make_vector3(1.0, 0.0, 0.0)
  mesh.vertices[2].position = make_vector3(1.0, 0.0, 1.0)
  mesh.vertices[3].position = make_vector3(0.0, 0.0, 1.0)
  mesh.vertices[0].normal = make_vector3(0.0, 1.0, 0.0)
  mesh.vertices[1].normal = make_vector3(0.0, 1.0, 0.0)
  mesh.vertices[2].normal = make_vector3(0.0, 1.0, 0.0)
  mesh.vertices[3].normal = make_vector3(0.0, 1.0, 0.0)
  mesh.indices[0] = 0 mesh.indices[1] = 1 mesh.indices[2] = 2
  mesh.indices[3] = 0 mesh.indices[4] = 2 mesh.indices[5] = 3


createProceduralSquarePlaneMesh :: (cellsPerEdgeCount: S32, halfWidth: F32)(mesh: @TriangleMesh)
  totalVertexCount: S32 = (cellsPerEdgeCount * cellsPerEdgeCount) * 4
  totalIndexCount: S32 = (cellsPerEdgeCount * cellsPerEdgeCount) * 6
  mesh = allocateTriangleMesh(CAST(U32)totalVertexCount, CAST(U32)totalIndexCount)
  vertexOffset: S32 = 0
  indexOffset: S32 = 0
  cellWidth: F32 = (halfWidth * 2.0) / CAST(F32)cellsPerEdgeCount

  colorRed: RGBA8 = make_rgba8(255, 0, 0, 255)
  colorGreen: RGBA8 = make_rgba8(0, 255, 0, 255)
  colorBlue: RGBA8 = make_rgba8(0, 0, 255, 255)

  i: S32 = 0
  WHILE i < (cellsPerEdgeCount * cellsPerEdgeCount)
    x: S32 = i % cellsPerEdgeCount
    y: S32 = i / cellsPerEdgeCount
    xpos: F32 = CAST(F32)x * cellWidth
    ypos: F32 = CAST(F32)y * cellWidth
    color: RGBA8
    IF (y % 2) == 0
      color = make_rgba8(175, 175, 175, 255)
      IF (x % 2) == 0
        color = make_rgba8(125, 125, 125, 255)
    ELSE
      color = make_rgba8(125, 125, 125, 255)
      IF (x % 2) == 0
        color = make_rgba8(175, 175, 175, 255)

    mesh.vertices[vertexOffset + 0].position = make_vector3(xpos, 0.0, ypos + cellWidth)
    mesh.vertices[vertexOffset + 1].position = make_vector3(xpos + cellWidth, 0.0, ypos + cellWidth)
    mesh.vertices[vertexOffset + 2].position = make_vector3(xpos + cellWidth, 0.0, ypos)
    mesh.vertices[vertexOffset + 3].position = make_vector3(xpos, 0.0, ypos)
    mesh.vertices[vertexOffset + 0].normal = make_vector3(0.0, 1.0, 0.0)
    mesh.vertices[vertexOffset + 1].normal = make_vector3(0.0, 1.0, 0.0)
    mesh.vertices[vertexOffset + 2].normal = make_vector3(0.0, 1.0, 0.0)
    mesh.vertices[vertexOffset + 3].normal = make_vector3(0.0, 1.0, 0.0)
    mesh.vertices[vertexOffset + 0].color = color
    mesh.vertices[vertexOffset + 1].color = color
    mesh.vertices[vertexOffset + 2].color = color
    mesh.vertices[vertexOffset + 3].color = color
    mesh.indices[indexOffset + 0] = CAST(U32)(vertexOffset + 0)
    mesh.indices[indexOffset + 1] = CAST(U32)(vertexOffset + 1) 
    mesh.indices[indexOffset + 2] = CAST(U32)(vertexOffset + 2)
    mesh.indices[indexOffset + 3] = CAST(U32)(vertexOffset + 0) 
    mesh.indices[indexOffset + 4] = CAST(U32)(vertexOffset + 2) 
    mesh.indices[indexOffset + 5] = CAST(U32)(vertexOffset + 3)
    vertexOffset = vertexOffset + 4
    indexOffset = indexOffset + 6
    i = i + 1



createProceduralCubeMesh :: (color: RGBA8)(mesh: @TriangleMesh)
  mesh = allocateTriangleMesh(24, 36)
  #Front Face
  mesh.vertices[0] = make_triangle_vertex(make_vector3(-0.5, -0.5, 0.5), make_vector3(0.0, 0.0, 1.0), color)
  mesh.vertices[1] = make_triangle_vertex(make_vector3( 0.5, -0.5, 0.5), make_vector3(0.0, 0.0, 1.0), color)
  mesh.vertices[2] = make_triangle_vertex(make_vector3( 0.5,  0.5, 0.5), make_vector3(0.0, 0.0, 1.0), color)
  mesh.vertices[3] = make_triangle_vertex(make_vector3(-0.5,  0.5, 0.5), make_vector3(0.0, 0.0, 1.0), color)
  #Right Face
  mesh.vertices[4] = make_triangle_vertex(make_vector3( 0.5, -0.5, 0.5), make_vector3(1.0, 0.0, 0.0), color)
  mesh.vertices[5] = make_triangle_vertex(make_vector3( 0.5, -0.5, -0.5), make_vector3(1.0, 0.0, 0.0), color)
  mesh.vertices[6] = make_triangle_vertex(make_vector3( 0.5,  0.5, -0.5), make_vector3(1.0, 0.0, 0.0), color)
  mesh.vertices[7] = make_triangle_vertex(make_vector3( 0.5,  0.5, 0.5), make_vector3(1.0, 0.0, 0.0), color)
  #Back Face
  mesh.vertices[8] = make_triangle_vertex(make_vector3( 0.5, -0.5, -0.5), make_vector3(0.0, 0.0, -1.0), color)
  mesh.vertices[9] = make_triangle_vertex(make_vector3(-0.5, -0.5, -0.5), make_vector3(0.0, 0.0, -1.0), color)
  mesh.vertices[10] = make_triangle_vertex(make_vector3(-0.5,  0.5, -0.5), make_vector3(0.0, 0.0, -1.0), color)
  mesh.vertices[11] = make_triangle_vertex(make_vector3( 0.5,  0.5, -0.5), make_vector3(0.0, 0.0, -1.0), color)
  #Left Face
  mesh.vertices[12] = make_triangle_vertex(make_vector3(-0.5, -0.5, -0.5), make_vector3(-1.0, 0.0, 0.0), color)
  mesh.vertices[13] = make_triangle_vertex(make_vector3(-0.5, -0.5,  0.5), make_vector3(-1.0, 0.0, 0.0), color)
  mesh.vertices[14] = make_triangle_vertex(make_vector3(-0.5,  0.5,  0.5), make_vector3(-1.0, 0.0, 0.0), color)
  mesh.vertices[15] = make_triangle_vertex(make_vector3(-0.5,  0.5, -0.5), make_vector3(-1.0, 0.0, 0.0), color)
  #Top Face
  mesh.vertices[16] = make_triangle_vertex(make_vector3(-0.5, 0.5,  0.5), make_vector3(0.0, 1.0, 0.0), color)
  mesh.vertices[17] = make_triangle_vertex(make_vector3( 0.5, 0.5,  0.5), make_vector3(0.0, 1.0, 0.0), color)
  mesh.vertices[18] = make_triangle_vertex(make_vector3( 0.5, 0.5, -0.5), make_vector3(0.0, 1.0, 0.0), color)
  mesh.vertices[19] = make_triangle_vertex(make_vector3(-0.5, 0.5, -0.5), make_vector3(0.0, 1.0, 0.0), color)
  #Bottom Face
  mesh.vertices[20] = make_triangle_vertex(make_vector3(-0.5, -0.5, -0.5), make_vector3(0.0, -1.0, 0.0), color)
  mesh.vertices[21] = make_triangle_vertex(make_vector3( 0.5, -0.5, -0.5), make_vector3(0.0, -1.0, 0.0), color)
  mesh.vertices[22] = make_triangle_vertex(make_vector3( 0.5, -0.5,  0.5), make_vector3(0.0, -1.0, 0.0), color)
  mesh.vertices[23] = make_triangle_vertex(make_vector3(-0.5, -0.5,  0.5), make_vector3(0.0, -1.0, 0.0), color)

  #Front
  mesh.indices[0] = 0 mesh.indices[1] = 1 mesh.indices[2] = 2
  mesh.indices[3] = 0 mesh.indices[4] = 2 mesh.indices[5] = 3
  #Right
  mesh.indices[6] = 4 mesh.indices[7] = 5 mesh.indices[8] = 6
  mesh.indices[9] = 4 mesh.indices[10] = 6 mesh.indices[11] = 7
  #Back
  mesh.indices[12] = 8 mesh.indices[13] = 9 mesh.indices[14] = 10
  mesh.indices[15] = 8 mesh.indices[16] = 10 mesh.indices[17] = 11
  #Left
  mesh.indices[18] = 12 mesh.indices[19] = 13 mesh.indices[20] = 14
  mesh.indices[21] = 12 mesh.indices[22] = 14 mesh.indices[23] = 15
  #Top
  mesh.indices[24] = 16 mesh.indices[25] = 17 mesh.indices[26] = 18
  mesh.indices[27] = 16 mesh.indices[28] = 18 mesh.indices[29] = 19
  #Bottom
  mesh.indices[30] = 20 mesh.indices[31] = 21 mesh.indices[32] = 22
  mesh.indices[33] = 20 mesh.indices[34] = 22 mesh.indices[35] = 23


topOrLeftEdgeBias :: (a: Vector2i, b: Vector2i)(bias: S32)
  bias = -1
  edge: Vector2i = sub_vector2i_vector2i(b, a)
  IF (b.y < a.y) && (edge.x < 0)
    bias = 0


drawScreenTriangle :: (ctx: @RenderContext, a: Vector2i, b: Vector2i, c: Vector2i)
  a.y = CAST(S32)ctx.bufferHeight - a.y
  b.y = CAST(S32)ctx.bufferHeight - b.y
  c.y = CAST(S32)ctx.bufferHeight - c.y

  minX: S32 = min_int32(a.x, min_int32(b.x, c.x))
  maxX: S32 = max_int32(a.x, max_int32(b.x, c.x))
  minY: S32 = min_int32(a.y, min_int32(b.y, c.y))
  maxY: S32 = max_int32(a.y, max_int32(b.y, c.y))
  minX = max_int32(0, minX)
  minY = max_int32(0, minY)
  maxX = min_int32(CAST(S32)ctx.bufferWidth - 1, maxX)
  maxY = min_int32(CAST(S32)ctx.bufferHeight - 1, maxY)

  currentSubPixel: Vector2i = make_vector2i(minX, minY)
  WHILE currentSubPixel.y < maxY
    currentSubPixel.x = minX
    WHILE currentSubPixel.x < maxX
      w0: S32 = orient2D(b, c, currentSubPixel)
      w1: S32 = orient2D(c, a, currentSubPixel)
      w2: S32 = orient2D(a, b, currentSubPixel)
      IF w0 >= 0 && w1 >= 0 && w2 >= 0
        pixelX: S32 = currentSubPixel.x
        pixelY: S32 = currentSubPixel.y
        index: U64 = CAST(U64)((CAST(U32)pixelX + (CAST(U32)pixelY * ctx.bufferWidth)) * 3)
        ctx.bufferColor[index + 0] = 255
        ctx.bufferColor[index + 1] = 0
        ctx.bufferColor[index + 2] = 0
      currentSubPixel.x = currentSubPixel.x + 1
    currentSubPixel.y = currentSubPixel.y + 1



drawTriangle :: (ctx: @RenderContext, mvpMatrix: Matrix4x4, a: TriangleVertex, b: TriangleVertex, c: TriangleVertex, sceneInfo: @SceneInfo)
  localSpaceA: Vector4 = make_vector4_from_vector3(a.position, 1.0)
  localSpaceB: Vector4 = make_vector4_from_vector3(b.position, 1.0)
  localSpaceC: Vector4 = make_vector4_from_vector3(c.position, 1.0)
  clipSpaceA: Vector4 = mul_matrix4x4_vector4(mvpMatrix, localSpaceA)
  clipSpaceB: Vector4 = mul_matrix4x4_vector4(mvpMatrix, localSpaceB)
  clipSpaceC: Vector4 = mul_matrix4x4_vector4(mvpMatrix, localSpaceC)
  ndcSpaceA: Vector4 = div_vector4_float32(clipSpaceA, clipSpaceA.w)
  ndcSpaceB: Vector4 = div_vector4_float32(clipSpaceB, clipSpaceB.w)
  ndcSpaceC: Vector4 = div_vector4_float32(clipSpaceC, clipSpaceC.w)

  # Convert from NDC space into screen coordinates
  # origin is the bottom left.  Y cord is inverted at buffer write time
  # So that triangle winding order is consistiant
  viewportWidth: F32 = CAST(F32)ctx.bufferWidth
  viewportHeight: F32 = CAST(F32)ctx.bufferHeight
  viewportSpaceA: Vector2 = make_vector2((ndcSpaceA.x + 1.0) * (viewportWidth * 0.5), (ndcSpaceA.y + 1.0) * (viewportHeight * 0.5))
  viewportSpaceB: Vector2 = make_vector2((ndcSpaceB.x + 1.0) * (viewportWidth * 0.5), (ndcSpaceB.y + 1.0) * (viewportHeight * 0.5))
  viewportSpaceC: Vector2 = make_vector2((ndcSpaceC.x + 1.0) * (viewportWidth * 0.5), (ndcSpaceC.y + 1.0) * (viewportHeight * 0.5))
  subPixelSpaceA: Vector2i = make_vector2i(CAST(S32)viewportSpaceA.x, CAST(S32)viewportSpaceA.y)
  subPixelSpaceB: Vector2i = make_vector2i(CAST(S32)viewportSpaceB.x, CAST(S32)viewportSpaceB.y)
  subPixelSpaceC: Vector2i = make_vector2i(CAST(S32)viewportSpaceC.x, CAST(S32)viewportSpaceC.y)

  # Clips our draw range to the union of the triangles bounding box and buffer bounds
  minX: S32 = min_int32(subPixelSpaceA.x, min_int32(subPixelSpaceB.x, subPixelSpaceC.x))
  maxX: S32 = max_int32(subPixelSpaceA.x, max_int32(subPixelSpaceB.x, subPixelSpaceC.x))
  minY: S32 = min_int32(subPixelSpaceA.y, min_int32(subPixelSpaceB.y, subPixelSpaceC.y))
  maxY: S32 = max_int32(subPixelSpaceA.y, max_int32(subPixelSpaceB.y, subPixelSpaceC.y))
  minX = max_int32(0, minX)
  minY = max_int32(0, minY)
  maxX = min_int32(CAST(S32)ctx.bufferWidth - 1, maxX)
  maxY = min_int32(CAST(S32)ctx.bufferHeight - 1, maxY)

  colorA: Vector4 = make_vector4_from_rgba8(a.color)
  colorB: Vector4 = make_vector4_from_rgba8(b.color)
  colorC: Vector4 = make_vector4_from_rgba8(c.color)

  currentSubPixel: Vector2i = make_vector2i(minX, minY)
  WHILE currentSubPixel.y < maxY
    currentSubPixel.x = minX
    WHILE currentSubPixel.x < maxX
      w0: S32 = orient2D(subPixelSpaceB, subPixelSpaceC, currentSubPixel)
      w1: S32 = orient2D(subPixelSpaceC, subPixelSpaceA, currentSubPixel)
      w2: S32 = orient2D(subPixelSpaceA, subPixelSpaceB, currentSubPixel)

      IF w0 >= 0 && w1 >= 0 && w2 >= 0
        sum: S32 = w0 + w1 + w2
        bc0: F32 = CAST(F32)w0 / CAST(F32)sum
        bc1: F32 = CAST(F32)w1 / CAST(F32)sum
        bc2: F32 = CAST(F32)w2 / CAST(F32)sum
        color: Vector4 = make_vector4_zero()
        color = add_vector4_vector4(color, mul_vector4_float32(colorA, bc0))
        color = add_vector4_vector4(color, mul_vector4_float32(colorB, bc1))
        color = add_vector4_vector4(color, mul_vector4_float32(colorC, bc2))
        normal: Vector3 = make_vector3_zero()
        normal = add_vector3_vector3(normal, mul_vector3_float32(a.normal, bc0))
        normal = add_vector3_vector3(normal, mul_vector3_float32(b.normal, bc1))
        normal = add_vector3_vector3(normal, mul_vector3_float32(c.normal, bc2))
        intensity: F32 = max_float32(dot_vector3(normal, sceneInfo.lightDirection), 0.0)
        IF 1 == 1
          color = mul_vector4_float32(color, intensity)
          pixelX: S32 = currentSubPixel.x
          pixelY: S32 = CAST(S32)ctx.bufferHeight - currentSubPixel.y
          index: U64 = CAST(U64)((CAST(U32)pixelX + (CAST(U32)pixelY * ctx.bufferWidth)) * 3)
          ctx.bufferColor[index + 0] = CAST(U8)(color.x * 255.0)
          ctx.bufferColor[index + 1] = CAST(U8)(color.y * 255.0)
          ctx.bufferColor[index + 2] = CAST(U8)(color.z * 255.0)

      currentSubPixel.x = currentSubPixel.x + 1
    currentSubPixel.y = currentSubPixel.y + 1



 
drawTriangleMesh :: (ctx: @RenderContext, mvpMatrix: Matrix4x4, mesh: @TriangleMesh, sceneInfo: @SceneInfo)
  currentIndex: S64 = 0
  WHILE currentIndex < CAST(S64)mesh.indexCount
    index0: U32 = mesh.indices[currentIndex + 0]
    index1: U32 = mesh.indices[currentIndex + 1]
    index2: U32 = mesh.indices[currentIndex + 2]
    drawTriangle(ctx, mvpMatrix, mesh.vertices[index0], mesh.vertices[index1], mesh.vertices[index2], sceneInfo)
    currentIndex = currentIndex + 3


copy_framebuffer_to_sdl_texture :: (ctx: @RenderContext, texture: @SDL_Texture)
  pixels: @U8 = 0
  pitch: S32 = 0
  SDL_LockTexture(texture, CAST(@SDL_Rect)0, @pixels, @pitch)
  write_index: U64 = 0
  read_index: U64 = 0
  WHILE write_index < CAST(U64)(ctx.bufferWidth * ctx.bufferHeight * 4)
    pixels[write_index + 3] = 255 #A
    pixels[write_index + 2] = ctx.bufferColor[read_index + 0] #R
    pixels[write_index + 1] = ctx.bufferColor[read_index + 1] #G
    pixels[write_index + 0] = ctx.bufferColor[read_index + 2] #B
    write_index = write_index + 4
    read_index = read_index + 3
  SDL_UnlockTexture(texture)


renderScene :: (ctx: @RenderContext, camera: @Camera, sceneInfo: @SceneInfo)
  camera.pitch = clamp_float32(camera.pitch, degrees_to_radians(-89.0), degrees_to_radians(89.0))
  camera.front.x = cosf(camera.yaw) * cosf(camera.pitch)
  camera.front.y = sinf(camera.pitch)
  camera.front.z = sinf(camera.yaw) * cosf(camera.pitch)
  camera.front = normalize_vector3(camera.front)
  viewMatrix: Matrix4x4 = make_matrix4x4_look_at_direction_right_hand(camera.position, camera.front)
  projectionMatrix: Matrix4x4 = make_matrix4x4_perspective_right_hand(camera.fieldOfView, camera.viewportWidth, camera.viewportHeight, 0.1, 100.0)
  objectIndex: S64 = 0
  WHILE objectIndex < sceneInfo.objectCount
    sceneObject: @SceneObject = @sceneInfo.objects[objectIndex]
    modelMatrix: Matrix4x4 = make_matrix4x4_translate_vector3(sceneObject.position)
    modelViewMatrix: Matrix4x4 = mul_matrix4x4_matrix4x4(viewMatrix, modelMatrix)
    mvpMatrix: Matrix4x4 = mul_matrix4x4_matrix4x4(projectionMatrix, modelViewMatrix)
    drawTriangleMesh(ctx, mvpMatrix, sceneObject.mesh, sceneInfo)  
    objectIndex = objectIndex + 1


main :: ()(errorCode: S32)
  BUFFER_WIDTH :: 1280
  BUFFER_HEIGHT :: 720

  ctx: RenderContext
  renderContextInitalize(@ctx, BUFFER_WIDTH, BUFFER_HEIGHT)

  SDL_Init(SDL_INIT_VIDEO)
  sdl_window: @SDL_Window = SDL_CreateWindow("SoftwareRasterizer", 0, 0, BUFFER_WIDTH, BUFFER_HEIGHT, SDL_WINDOW_OPENGL)
  sdl_renderer: @SDL_Renderer = SDL_CreateRenderer(sdl_window, -1, CAST(U32)(SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC))
  SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1)
  SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24)
  SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8)
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2)
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 2)
  sdl_glcontext: @SDL_GLContext = SDL_GL_CreateContext(sdl_window)
  texture: @SDL_Texture = SDL_CreateTexture(sdl_renderer, SDL_PIXELFORMAT_RGB888, SDL_TEXTUREACCESS_STREAMING, BUFFER_WIDTH, BUFFER_HEIGHT)


  sceneInfo: SceneInfo
  sceneInfo.objectCount = 0
  sceneInfo.lightDirection = normalize_vector3(make_vector3(0.5, 0.5, 0.0))
  planeMesh: @TriangleMesh = createProceduralSquarePlaneMesh(1, 8.0)
  cubeMeshBlue: @TriangleMesh = createProceduralCubeMesh(make_rgba8(30, 60, 128, 255))
  cubeMeshGreen: @TriangleMesh = createProceduralCubeMesh(make_rgba8(30, 128, 22, 255))
  addSceneObject(@sceneInfo, planeMesh, make_vector3(0.0, 0.0, 0.0))
  #addSceneObject(@sceneInfo, cubeMeshBlue, make_vector3(1.0, 0.5, 2.0))
  #addSceneObject(@sceneInfo, cubeMeshGreen, make_vector3(4.7, 0.5, 10.2))

  camera: Camera
  camera.position = make_vector3(0.0, 5.0, 5.0)
  camera.yaw = degrees_to_radians(-90.0)
  camera.pitch = degrees_to_radians(0.0)
  camera.fieldOfView = degrees_to_radians(45.0)
  camera.viewportWidth = CAST(F32)BUFFER_WIDTH
  camera.viewportHeight = CAST(F32)BUFFER_HEIGHT

  lastGlobalMouseX: S32 = 0
  lastGlobalMouseY: S32 = 0
  SDL_GetGlobalMouseState(@lastGlobalMouseX, @lastGlobalMouseY)

  keycount: S32
  keystate: @U8 = SDL_GetKeyboardState(@keycount)

  isRunning: S32 = 1
  WHILE isRunning == 1
    IF ctx.lastTime == 0
      ctx.lastTime = SDL_GetTicks()
      ctx.elapsedTime = 1.0 / 60.0
      ctx.deltaTime = 1.0 / 60.0
    ELSE
      currentTicks: U32 = SDL_GetTicks()
      deltaTicks: U32 = currentTicks - ctx.lastTime
      ctx.lastTime = currentTicks
      ctx.deltaTime = (CAST(F32)deltaTicks) / 1000.0
      ctx.elapsedTime = ctx.elapsedTime + ctx.deltaTime

    event: SDL_Event
    event.type = 0
    WHILE SDL_PollEvent(@event) == 1
      IF event.type == SDL_QUIT
        errorCode = -1
        RETURN

    currentMouseX : S32 = 0
    currentMouseY : S32 = 0
    buttonMask: U32 = SDL_GetGlobalMouseState(@currentMouseX, @currentMouseY)
    deltaMouseX: S32 = currentMouseX - lastGlobalMouseX
    deltaMouseY: S32 = currentMouseY - lastGlobalMouseY
    lastGlobalMouseX = currentMouseX
    lastGlobalMouseY = currentMouseY

    # Camera FPS Controls
    IF (buttonMask & SDL_BUTTON_RMASK) > 0
      camera.yaw = camera.yaw + (CAST(F32)deltaMouseX * ctx.deltaTime)
      camera.pitch = camera.pitch - (CAST(F32)deltaMouseY * ctx.deltaTime)
      camera.pitch = clamp_float32(camera.pitch, degrees_to_radians(-89.0), degrees_to_radians(89.0))

      cameraUp: Vector3 = make_vector3(0.0, 1.0, 0.0)
      cameraRight: Vector3 = normalize_vector3(cross_vector3(camera.front, cameraUp))
      deltaPosition: Vector3 = make_vector3(0.0, 0.0, 0.0)
      IF keystate[SDL_SCANCODE_W] > 0
        deltaPosition = add_vector3_vector3(deltaPosition, camera.front)
      IF keystate[SDL_SCANCODE_S] > 0
        deltaPosition = sub_vector3_vector3(deltaPosition, camera.front)
      IF keystate[SDL_SCANCODE_A] > 0
        deltaPosition = sub_vector3_vector3(deltaPosition, cameraRight)
      IF keystate[SDL_SCANCODE_D] > 0
        deltaPosition = add_vector3_vector3(deltaPosition, cameraRight)
      IF keystate[SDL_SCANCODE_SPACE] > 0
        deltaPosition = add_vector3_vector3(deltaPosition, cameraUp)
      IF keystate[SDL_SCANCODE_LCTRL] > 0
        deltaPosition = sub_vector3_vector3(deltaPosition, cameraUp)

      deltaPosition = mul_vector3_float32(deltaPosition, 3.0)
      deltaPosition = mul_vector3_float32(deltaPosition, ctx.deltaTime)
      camera.position = add_vector3_vector3(camera.position, deltaPosition)


    framebufferClear(@ctx)
    renderScene(@ctx, @camera, @sceneInfo)
    copy_framebuffer_to_sdl_texture(@ctx, texture)
    SDL_RenderCopy(sdl_renderer, texture, CAST(@SDL_Rect)0, CAST(@SDL_Rect)0)
    SDL_RenderPresent(sdl_renderer)
    
  renderContextTerminate(@ctx)
  errorCode = 0
