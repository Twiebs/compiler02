
abort :: () FOREIGN
malloc :: (size: U64) >> @U8 FOREIGN
write :: (fileDescriptor: S32, buffer: @U8, count: U64) >> S64 FOREIGN

IMPORT "stdlib/string.src"

Print :: (message: @U8)
  length: U64 = string_cstring_length(message)
  write(1, message, length)

TypeA :: TYPE
  value: S32

TypeB :: TYPE
  value: F32

TestUnaryOperations :: ()
  b0: S8 = 1
  b0 = CAST(S8)!b0

  u64a: U64 = ~0xFFF
  u64b: U64 = u64a + 0xFF
  u64b = ~u64a

TestBinaryOperations :: ()
  i0: U64 = 1 << 12
  i1: U64 = i0 >> 8
  i2: U64 = i1 - 1
  i3: U64 = i2 & 0b111
  b0: U64 = CAST(U64)(1 && 0)

TestBasicFloatCasting :: ()
  f0: F32 = 2.0
  f1: F64 = 3.0
  f2: F32 = CAST(F32)876.2390
  f3: F64 = CAST(F64)9963625.7592
  f4: F32 = CAST(F32)7
  f5: F64 = CAST(F64)28
  f6: F32 = CAST(F32)0x1000
  f7: F64 = CAST(F64)0b1111
  f8: F64 = CAST(F64)f0
  f9: F32 = CAST(F32)f1

TestCasting :: ()
  TestBasicFloatCasting()

  int0: S32 = 7
  int1: S64 = CAST(S64)int0
  int2: S32 = -428

  a: TypeA
  b: TypeB
  aptr: @TypeA = @a
  bptr: @TypeB = @b

  ptr0: @TypeA = CAST(@TypeA)0x1000
  ptr1: @TypeB = CAST(@TypeB)ptr0

branch_test :: (a: @TypeA)
  IF CAST(U64)a != 0
    a.value = 6
  ELSE
    a1: TypeA
    IF a1.value > 0
      a1.value = 0
    ELSE IF a1.value < 0
      a1.value = 0
    ELSE
      a1.value = 0
      
Type :: TYPE
  x: S32


print_uint64 :: (value: U64)
  buffer: [24]U8 #Max chars in u64 is 20
  length: U64 = string_ascii_from_uint64(CAST(@U8)buffer, value, 10)
  write(1, CAST(@U8)buffer, length)

Add :: (a: S32, b: S32) >> S32
  RETURN a + b

Fuck :: (a: @Type)
  b: S32 = a.x

main :: () >> S32
  Print("IM A TALKING CACTUS\n")
  RETURN 0